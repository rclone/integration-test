# Edit this file to introduce tasks to be run by cron.
# 
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
# 
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').# 
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 
# For more information see the manual pages of crontab(5) and cron(8)
# 
# m h  dom mon dow   command

SHELL=/bin/bash
MAILTO=nick@craig-wood.com

0 3 * * * (cd ~/go/src/github.com/rclone/rclone; date -Is; source ~/.profile; test_all -clean ) >> clean.log 2>&1 || echo "rclone clean failed"

0 5 * * * (cd ~/integration-test; date -Is; source ~/.profile; go run integration-test.go) >> integration-test.log 2>&1 || echo "rclone integration tests failed"

0 9 * * * (cd ~/integration-test; date -Is; source ~/.profile; ./upload-tip.sh) >> upload-tip.log 2>&1 || echo "rclone tip upload failed"

10 10 * * * (cd ~/integration-test; date -Is; source ~/.profile; ./tidy-integration-test.sh) >> tidy-integration-test.log 2>&1 || echo "rclone tidy integration test failed"

0 2 * * Sun (cd ~/integration-test; date -Is; source ~/.profile; ./update-docker-images.sh) >> update-docker-images.log 2>&1 || echo "rclone update docker images failed"

#19 * * * * ./test-beta-download.sh >>test-beta-download.log 2>&1

# Backup memstore to b2
3 2 * * * /home/rclone/backup-memstore-rclone.sh >>/tmp/backup-memstore-rclone.log 2>&1
